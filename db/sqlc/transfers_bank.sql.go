// Code generated by sqlc. DO NOT EDIT.
// source: transfers_bank.sql

package db

import (
	"context"
)

const createTransferBank = `-- name: CreateTransferBank :one
INSERT INTO transfers_bank (
  account_id,
  bank_account_id,
  amount
) VALUES (
  $1, $2, $3
) RETURNING id, account_id, bank_account_id, amount, created_at
`

type CreateTransferBankParams struct {
	AccountID     int64 `json:"accountID"`
	BankAccountID int64 `json:"bankAccountID"`
	Amount        int64 `json:"amount"`
}

func (q *Queries) CreateTransferBank(ctx context.Context, arg CreateTransferBankParams) (TransfersBank, error) {
	row := q.db.QueryRowContext(ctx, createTransferBank, arg.AccountID, arg.BankAccountID, arg.Amount)
	var i TransfersBank
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.BankAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getTransferBank = `-- name: GetTransferBank :one
SELECT id, account_id, bank_account_id, amount, created_at FROM transfers_bank
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransferBank(ctx context.Context, id int64) (TransfersBank, error) {
	row := q.db.QueryRowContext(ctx, getTransferBank, id)
	var i TransfersBank
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.BankAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listTransfersBank = `-- name: ListTransfersBank :many
SELECT id, account_id, bank_account_id, amount, created_at FROM transfers_bank
WHERE 
    account_id = $1 OR
    bank_account_id = $2
ORDER BY id
LIMIT $3
OFFSET $4
`

type ListTransfersBankParams struct {
	AccountID     int64 `json:"accountID"`
	BankAccountID int64 `json:"bankAccountID"`
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
}

func (q *Queries) ListTransfersBank(ctx context.Context, arg ListTransfersBankParams) ([]TransfersBank, error) {
	rows, err := q.db.QueryContext(ctx, listTransfersBank,
		arg.AccountID,
		arg.BankAccountID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TransfersBank{}
	for rows.Next() {
		var i TransfersBank
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.BankAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
